<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DSE</title>
    <link href="/2023/02/10/DSE/"/>
    <url>/2023/02/10/DSE/</url>
    
    <content type="html"><![CDATA[<p>Today let’s work on a new guest, <code>DSE</code>, or Dead Store Elimination.</p><h1 id="Pass-Description"><a href="#Pass-Description" class="headerlink" title="Pass Description"></a>Pass Description</h1><h2 id="Quick-look"><a href="#Quick-look" class="headerlink" title="Quick look"></a>Quick look</h2><p>Name : Dead Store Elimination</p><p>Pass Arg Name : <code>dse</code></p><p>Pass Class Name: <code>DSELegacyPass</code></p><p>Pass Arguments: None</p><p>Pass Type: <code>FunctionPass</code></p><p>Actual Working Level: Directly on functions</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>As the name indicates, DSE removes stores that are dead using MemorySSA.<br>Generally speaking, the algorithm is:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(each Killer in MemDefs)</span></span><br>    ToCheck<span class="hljs-selector-class">.insert</span>()<br>    <span class="hljs-built_in">for</span>(each Victim <span class="hljs-keyword">in</span> ToCheck)<br>        Dead = <span class="hljs-built_in">getDomMemoryDef</span>(Killer, Victim)<br>        <span class="hljs-built_in">if</span>(isMemTerm &amp; Killer<span class="hljs-selector-class">.Obj</span> = Dead.Obj)<br>            Kill Dead<br>        <span class="hljs-keyword">else</span><br>            OR = <span class="hljs-built_in">isOverwrite</span>(Killer, Dead)<br>            Kill Dead depending on OR<br></code></pre></td></tr></table></figure><h1 id="Atomics-Out-of-Door"><a href="#Atomics-Out-of-Door" class="headerlink" title="Atomics Out of Door"></a>Atomics Out of Door</h1><p>Consider this piece of code:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">std:</span>:<span class="hljs-keyword">atomic</span>&lt;int&gt; <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span> y<span class="hljs-comment">;</span><br>int a<span class="hljs-punctuation">,</span> b<span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span><span class="hljs-punctuation">,</span> d<span class="hljs-punctuation">,</span> e<span class="hljs-punctuation">,</span> f<span class="hljs-comment">;</span><br>int main()&#123;<br>    <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">; </span><br>    b <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span><span class="hljs-comment">;  //raw</span><br>    <span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;  //ow</span><br>    <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span><span class="hljs-comment">;  //raw</span><br>    d <span class="hljs-operator">=</span> y<span class="hljs-comment">;</span><br>    e <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span><span class="hljs-comment">;  //ditto</span><br>    f <span class="hljs-operator">=</span> y<span class="hljs-comment">;  //rar</span><br>&#125;<br></code></pre></td></tr></table></figure><p>The first <code>x = 1</code> is dead after <code>EarlyCSE</code> replaces <code>b = x</code> with <code>b = 1</code>. Then <code>DSE</code> should be able to remove it.</p><p>But, <code>clang++ HW.cpp -O3 -mllvm -print-after-all</code>, you will find nothing changed after <code>*** IR Dump After DSEPass on main ***</code>.</p><p>One of the reason is, when looking for a <code>MemDef</code> using <code>getDomMemoryDef</code>. Atomics will be skipped:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">getDomMemoryDef</span>(...)&#123;<br>    ...<br>    if (isDSEBarrier(KillingUndObj, CurrentI)) &#123;<br>          <span class="hljs-built_in">LLVM_DEBUG</span>(dbgs() &lt;&lt; &quot;  ... skip, barrier\n&quot;);<br>          return <span class="hljs-attribute">None</span>;<br>    &#125;<br>    ...<br>&#125;<br>...<br>bool <span class="hljs-built_in">isDSEBarrier</span>(const Value *KillingUndObj, Instruction *DeadI) &#123;<br>    ...<br>    if (DeadI-&gt;isAtomic()) &#123;<br>      if (auto *LI = dyn_cast&lt;LoadInst&gt;(DeadI))<br>        return <span class="hljs-built_in">isStrongerThanMonotonic</span>(LI-&gt;getOrdering());<br>      ...<br>    &#125;<br>    ...<br>  &#125;<br><br></code></pre></td></tr></table></figure><p>Any atomic access with a memory order stronger than <code>monotonic</code>, which is equivalent to <code>relaxed</code> in C&#x2F;C++, will be deemed as a “barrier” and skipped. </p><p>After refining the condition, however, atomics still cannot be treated.</p><h1 id="OnGoing…"><a href="#OnGoing…" class="headerlink" title="OnGoing…"></a>OnGoing…</h1>]]></content>
    
    
    <categories>
      
      <category>Thesis Project</category>
      
      <category>LLVM Transform Pass</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Let&#39;s get started</title>
    <link href="/2023/02/09/Lets-Start-Here/"/>
    <url>/2023/02/09/Lets-Start-Here/</url>
    
    <content type="html"><![CDATA[<p>This is a test article.</p><p>From today, I am going to maintain blogs about my work done on LLVM.</p>]]></content>
    
    
    <categories>
      
      <category>Thesis Project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
